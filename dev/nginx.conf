worker_processes  1;

events {
  worker_connections  1024;
}

error_log /dev/stdout notice;

http {
  include       mime.types;
  default_type  application/octet-stream;

  lua_shared_dict counters 1m;

  keepalive_timeout  65;

  server {
    listen       8080;
    server_name  localhost;

    location / {
      rewrite_by_lua_block {
        local global_throttle = require("resty.global_throttle")
        local my_throttle, err = global_throttle.new(100, 2,  { provider = "shared_dict", name = "counters" })
        if not my_throttle then
          ngx.log(ngx.ERR, err)
        end
        local should_throttle, err = my_throttle:process("my_key")
        if should_throttle then
          ngx.exit(429)
        end
      }

      content_by_lua_block {
        ngx.say("Halo!")
      }
    }

    location /memcached {
      rewrite_by_lua_block {
        local global_throttle = require("resty.global_throttle")
        local my_throttle, err = global_throttle.new(100, 2,  { provider = "memcached", host = "172.17.0.3", port = "11211", connect_timeout = 2 })
        if not my_throttle then
          ngx.log(ngx.ERR, err)
          return ngx.exit(500)
        end
        local should_throttle, err = my_throttle:process("my_key")
        if should_throttle then
          return ngx.exit(429)
        end
      }

      content_by_lua_block {
        ngx.say("Halo!")
      }
    }
  }
}
